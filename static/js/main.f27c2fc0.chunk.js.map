{"version":3,"sources":["styles/images/icons/logo.svg","styles/images/icons/pressure.svg","styles/images/icons/humidity.svg","styles/images/icons/wind-speed.svg","components/Header.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","href","src","Logo","alt","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","Fragment","description","icon","concat","city","country","temperature","pressure","Pressure","humidity","Humidity","wind","Wind","error","target","API_KEY","App","state","undefined","_callee","e","api_call","data","message","regenerator_default","wrap","_context","prev","next","preventDefault","elements","value","fetch","then","response","json","sent","console","log","_this","setState","Math","round","main","temp","sys","weather","speed","stop","components_Header","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f27c2fc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3077681e.svg\";","module.exports = __webpack_public_path__ + \"static/media/pressure.6985bce9.svg\";","module.exports = __webpack_public_path__ + \"static/media/humidity.5c87a411.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind-speed.a92ffa0d.svg\";","import React from 'react';\nimport Logo from '../styles/images/icons/logo.svg'\n\n\n\nclass Header extends React.Component {\n\n    \n    render() {\n        return (\n            <header >\n                <div className={\"container\"}>\n                    <a href=\".\">Todaysweather.com</a>\n                    <img className={\"logo\"} src={Logo} alt=\"Logo\"/>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\n\nclass Form extends React.Component {\n\n\n    render() {\n        return (\n            <div className={\"module\"}>\n                <h2>Find Your City</h2>\n                <form className={\"find-city\"} onSubmit={this.props.getWeather}>\n                    <input type=\"text\" name=\"city\" placeholder=\"City\"/>\n                    <input type=\"text\" name=\"country\" placeholder=\"Country (ISO 3166-1 examples: PL,US,UK)\"/>\n                    <button><i className=\"material-icons\">search</i></button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\nimport Pressure from '../styles/images/icons/pressure.svg';\nimport Humidity from '../styles/images/icons/humidity.svg';\nimport Wind from '../styles/images/icons/wind-speed.svg';\n\nclass Weather extends React.Component {\n\n\n    render() {\n        return (\n            <>\n            <div>{this.props.description && <div className={\"weather\"}>\n                {this.props.icon &&\n                <img className={\"conditions\"} src={`http://openweathermap.org/img/w/${this.props.icon}.png`} alt=\"Conditions\"/>}\n                <div className={\"weatherInfo\"}>\n                    {this.props.city && this.props.country &&\n                    <span className={\"city\"}>{this.props.city}, {this.props.country}</span>}\n                    {this.props.temperature && <span className={\"temperature\"}>{this.props.temperature}Â°C</span>}\n                </div>\n                <ul>\n                    {this.props.pressure && <li><img src={Pressure} alt=\"Pressure\"/>{this.props.pressure}hPa</li>}\n                    {this.props.humidity && <li><img src={Humidity} alt=\"Humidity\"/>{this.props.humidity}%</li>}\n                    {this.props.wind && <li><img src={Wind} alt=\"Wind Speed\"/>{this.props.wind}m/s</li>}\n                </ul>\n\n            </div>}</div>\n                {this.props.error && <a href={\"https://pl.wikipedia.org/wiki/ISO_3166-1_alfa-2\"} className={\"WrongVal\"} target={\"blank\"}>Please Enter The Correct Value</a>}\n             </>\n        )\n    }\n}\n\nexport default Weather;\n\n","import React from 'react';\n\n\nimport \"./styles/main.scss\";\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = \"355085cde5571a7a583e29effcca38c0\";\n\nclass App extends React.Component {\n\n    state = {\n        temperature : undefined,\n        city: undefined,\n        country: undefined,\n        description: undefined,\n        error: undefined,\n        pressure: undefined,\n        humidity:undefined,\n        wind: undefined\n\n\n    }\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n            .then(response => response.json());\n\n\n\n        const data = await api_call;\n        let message = data.message;\n        console.log(data);\n        if(city && country && !message){\n            this.setState({\n                temperature: Math.round(data.main.temp),\n                city: data.name,\n                country: data.sys.country,\n                description: data.weather[0].main,\n                icon: data.weather[0].icon,\n                pressure: data.main.pressure,\n                humidity: data.main.humidity,\n                wind: data.wind.speed,\n                error:\"\"\n            })\n        } else {\n            this.setState({\n                temperature: \"\",\n                city: \"\",\n                country: \"\",\n                pressure:\"\",\n                wind: \"\",\n                humidity:\"\",\n                description: \"\",\n                icon:\"\",\n                error:\"Please enter the correct value\"\n            })\n        }\n\n    };\n    render() {\n\n        return (\n            <div className={\"containerA\"}>\n              <Header />\n              <Form getWeather={this.getWeather} />\n              <Weather temperature={this.state.temperature} city={this.state.city} country={this.state.country} description={this.state.description} icon={this.state.icon} pressure={this.state.pressure} humidity={this.state.humidity} wind={this.state.wind} error={this.state.error}\n              />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}